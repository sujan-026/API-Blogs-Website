<!-- views/scripts.ejs -->
<script>
    let currentPage = 1;
    const postsPerPage = 10;
    let totalPosts = 0;

    // Fetch all posts
    async function fetchPosts() {
        try {
            const response = await axios.get('/api/posts');
            const posts = response.data;
            totalPosts = posts.length;
            updatePagination();
            displayPosts(posts);
        } catch (error) {
            console.error('Error fetching posts:', error);
        }
    }

    // Display posts for the current page
    function displayPosts(posts) {
        const startIndex = (currentPage - 1) * postsPerPage;
        const endIndex = startIndex + postsPerPage;
        const postsToDisplay = posts.slice(startIndex, endIndex);

        const postsList = document.getElementById('postsList');
        postsList.innerHTML = '';
        postsToDisplay.forEach(post => {
            postsList.innerHTML += `
          <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-2xl font-semibold mb-2">${post.name}</h2>
            <p class="text-gray-600 mb-4">${post.content}</p>
            <div class="flex space-x-4">
              <button onclick="editPost(${post.id})" class="bg-yellow-500 text-white px-4 py-2 rounded-lg hover:bg-yellow-600">Edit</button>
              <button onclick="deletePost(${post.id})" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600">Delete</button>
            </div>
          </div>
        `;
        });
    }

    // Update pagination
    function updatePagination() {
        const totalPages = Math.ceil(totalPosts / postsPerPage);
        document.getElementById('currentPage').textContent = currentPage;
        document.getElementById('totalPages').textContent = totalPages;
        document.getElementById('prevPage').disabled = currentPage === 1;
        document.getElementById('nextPage').disabled = currentPage === totalPages;
    }

    // Create new post
    document.getElementById('createPostForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const name = document.getElementById('postName').value;
        const content = document.getElementById('postContent').value;
        try {
            await axios.post('/api/posts', { name, content });
            document.getElementById('postName').value = '';
            document.getElementById('postContent').value = '';
            alert('Post created successfully!');
            fetchPosts();
        } catch (error) {
            console.error('Error creating post:', error);
            alert('Error creating post. Please try again.');
        }
    });

    // Edit post
    async function editPost(id) {
  try {
    const response = await axios.get(`/api/posts/${id}`);
    const post = response.data;
    console.log('Fetched post for edit:', post);  // Add this line for debugging
    document.getElementById('editPostId').value = post.id;
    document.getElementById('editPostName').value = post.name;
    document.getElementById('editPostContent').value = post.content;
    document.getElementById('editModal').classList.remove('hidden');
    document.getElementById('editModal').classList.add('flex');
  } catch (error) {
    console.error('Error fetching post for edit:', error);
    alert('Error fetching post for edit. Please try again.');
  }
}

    // Update post
    document.getElementById('editPostForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const id = document.getElementById('editPostId').value;
  const name = document.getElementById('editPostName').value;
  const content = document.getElementById('editPostContent').value;
  
  console.log('Submitting edit form with values:', { id, name, content });  // Add this line for debugging
  
  if (!id || !name || !content) {
    alert('Error: Missing required fields');
    return;
  }

  try {
    const response = await axios.put(`/api/posts/${id}`, { name, content });
    console.log('Update response:', response);
    if (response.status === 200) {
      closeEditModal();
      alert('Post updated successfully!');
      fetchPosts();
    } else {
      throw new Error(`Unexpected response status: ${response.status}`);
    }
  } catch (error) {
    console.error('Error updating post:', error);
    if (error.response) {
      console.error('Error response:', error.response.data);
      alert(`Error updating post: ${error.response.data.error || 'Unknown error'}`);
    } else {
      alert('Error updating post. Please try again.');
    }
  }
});

    // Delete post
    async function deletePost(id) {
        if (confirm('Are you sure you want to delete this post?')) {
            try {
                await axios.delete(`/api/posts/${id}`);
                alert('Post deleted successfully!');
                fetchPosts();
            } catch (error) {
                console.error('Error deleting post:', error);
                alert('Error deleting post. Please try again.');
            }
        }
    }

    // Close edit modal
    function closeEditModal() {
        document.getElementById('editModal').classList.add('hidden');
        document.getElementById('editModal').classList.remove('flex');
    }

    // Pagination event listeners
    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            fetchPosts();
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        const totalPages = Math.ceil(totalPosts / postsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            fetchPosts();
        }
    });

    // Initial fetch of posts
    fetchPosts();
</script>